//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Scenes/Scripts/XRInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRInput"",
    ""maps"": [
        {
            ""name"": ""Hands"",
            ""id"": ""530eaa54-3756-4fd2-9820-9596ca8f5f17"",
            ""actions"": [
                {
                    ""name"": ""LeftGrip"",
                    ""type"": ""Button"",
                    ""id"": ""211b03eb-634c-4f23-93a8-403ce8376a74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightGrip"",
                    ""type"": ""Button"",
                    ""id"": ""8689713e-a468-439f-9b68-c5d6ac207163"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""028abf69-5f95-4d9f-b928-51a6501efdc3"",
                    ""path"": ""<XRController>{LeftHand}/gripButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06a1ea09-4307-4326-b03d-c6bc4305f672"",
                    ""path"": ""<XRController>{RightHand}/gripButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Hands
        m_Hands = asset.FindActionMap("Hands", throwIfNotFound: true);
        m_Hands_LeftGrip = m_Hands.FindAction("LeftGrip", throwIfNotFound: true);
        m_Hands_RightGrip = m_Hands.FindAction("RightGrip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hands
    private readonly InputActionMap m_Hands;
    private IHandsActions m_HandsActionsCallbackInterface;
    private readonly InputAction m_Hands_LeftGrip;
    private readonly InputAction m_Hands_RightGrip;
    public struct HandsActions
    {
        private @XRInput m_Wrapper;
        public HandsActions(@XRInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftGrip => m_Wrapper.m_Hands_LeftGrip;
        public InputAction @RightGrip => m_Wrapper.m_Hands_RightGrip;
        public InputActionMap Get() { return m_Wrapper.m_Hands; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HandsActions set) { return set.Get(); }
        public void SetCallbacks(IHandsActions instance)
        {
            if (m_Wrapper.m_HandsActionsCallbackInterface != null)
            {
                @LeftGrip.started -= m_Wrapper.m_HandsActionsCallbackInterface.OnLeftGrip;
                @LeftGrip.performed -= m_Wrapper.m_HandsActionsCallbackInterface.OnLeftGrip;
                @LeftGrip.canceled -= m_Wrapper.m_HandsActionsCallbackInterface.OnLeftGrip;
                @RightGrip.started -= m_Wrapper.m_HandsActionsCallbackInterface.OnRightGrip;
                @RightGrip.performed -= m_Wrapper.m_HandsActionsCallbackInterface.OnRightGrip;
                @RightGrip.canceled -= m_Wrapper.m_HandsActionsCallbackInterface.OnRightGrip;
            }
            m_Wrapper.m_HandsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftGrip.started += instance.OnLeftGrip;
                @LeftGrip.performed += instance.OnLeftGrip;
                @LeftGrip.canceled += instance.OnLeftGrip;
                @RightGrip.started += instance.OnRightGrip;
                @RightGrip.performed += instance.OnRightGrip;
                @RightGrip.canceled += instance.OnRightGrip;
            }
        }
    }
    public HandsActions @Hands => new HandsActions(this);
    public interface IHandsActions
    {
        void OnLeftGrip(InputAction.CallbackContext context);
        void OnRightGrip(InputAction.CallbackContext context);
    }
}
